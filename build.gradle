import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'jacoco'
}

def jarVersion = "2.21.0.TEST.1"
group = 'io.nats'

def isMerge = System.getenv("BUILD_EVENT") == "push"
def isRelease = System.getenv("BUILD_EVENT") == "release"

// version is the variable the build actually uses.
version = isRelease ? jarVersion : jarVersion + "-SNAPSHOT"

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://repo1.maven.org/maven2/" }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:4.0'
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
        events "started", "passed", "skipped", "failed"
        showStandardStreams = true
    }
}

javadoc {
    options.addBooleanOption('html5', true)
    options.overview = 'src/main/javadoc/overview.html' // relative to source root
    source = sourceSets.main.allJava
    title = "NATS.IO JNats JSON"
    classpath = sourceSets.main.runtimeClasspath
    doLast {
        if (!OperatingSystem.current().isWindows()) {
            exec {
                println "Updating favicon on all html files"
                workingDir 'build/docs/javadoc'
                // Only on linux, mac at this point
                commandLine 'find', '.', '-name', '*.html', '-exec', 'sed', '-i', '-e', 's#<head>#<head><link rel="icon" type="image/ico" href="favicon.ico">#', '{}', ';'
            }
            copy {
                println "Copying images to javadoc folder"
                from 'src/main/javadoc/images'
                into 'build/docs/javadoc'
            }
        }
    }
}

if (isMerge || isRelease) {
    nexusPublishing {
        repositories {
            sonatype {
                nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
                snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
                username = System.getenv('OSSRH_USERNAME')
                password = System.getenv('OSSRH_PASSWORD')
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'JNats Json'
                description = 'JSON Parser built specifically for JNATS'
                url = 'https://github.com/nats-io/nats.java.json'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = "synadia"
                        name = "Synadia"
                        email = "info@synadia.com"
                        url = "https://synadia.io"
                    }
                }
                scm {
                    url = 'https://github.com/nats-io/nats.java.json'
                }
            }
        }
    }
//    repositories {
//        maven {
//            // change URLs to point to your repos, e.g. http://my.org/repo
//            def releasesRepoUrl = "https://ossrh-staging-api.central.sonatype.com/service/local/"
//            def snapshotsRepoUrl = layout.buildDirectory.dir("https://central.sonatype.com/repository/maven-snapshots/")
//            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//        }
//    }
}

if (isRelease) {
    signing {
        def signingKeyId = System.getenv('SIGNING_KEY_ID')
        def signingKey = System.getenv('SIGNING_KEY')
        def signingPassword = System.getenv('SIGNING_PASSWORD')
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        sign configurations.archives
        sign publishing.publications.mavenJava
    }
}
